import React from 'react';

const ReflectionCard = ({ reflection }) => {
  const formatInlineText = (text) => {
    // Handle bold text **text**
    const parts = text.split(/(\*\*.*?\*\*)/g);
    return parts.map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return (
          <strong key={index} className="font-bold text-blue-900">
            {part.slice(2, -2)}
          </strong>
        );
      }
      return part;
    });
  };

  const formatReflection = (text) => {
    const lines = text.split('\n');
    const elements = [];
    let currentList = [];
    
    lines.forEach((line, index) => {
      const trimmedLine = line.trim();
      
      // Handle headers (### or ##)
      if (trimmedLine.startsWith('### ')) {
        if (currentList.length > 0) {
          elements.push(<ul key={`list-${index}`} className="list-disc pl-6 mb-4 space-y-1">{currentList}</ul>);
          currentList = [];
        }
        elements.push(
          <h3 key={index} className="text-lg font-bold text-blue-900 mt-6 mb-3 border-b border-blue-200 pb-2">
            {trimmedLine.replace('### ', '')}
          </h3>
        );
      }
      // Handle bullet points
      else if (trimmedLine.startsWith('* ')) {
        const content = trimmedLine.replace('* ', '');
        const formattedContent = formatInlineText(content);
        currentList.push(
          <li key={`${index}-${currentList.length}`} className="text-blue-800">
            {formattedContent}
          </li>
        );
      }
      // Handle numbered lists
      else if (/^\d+\. /.test(trimmedLine)) {
        if (currentList.length > 0) {
          elements.push(<ul key={`list-${index}`} className="list-disc pl-6 mb-4 space-y-1">{currentList}</ul>);
          currentList = [];
        }
        const content = trimmedLine.replace(/^\d+\. /, '');
        const formattedContent = formatInlineText(content);
        elements.push(
          <div key={index} className="flex mb-2">
            <span className="font-bold text-blue-900 mr-2">{trimmedLine.match(/^\d+/)[0]}.</span>
            <span className="text-blue-800">{formattedContent}</span>
          </div>
        );
      }
      // Handle regular paragraphs
      else if (trimmedLine && !trimmedLine.startsWith('---')) {
        if (currentList.length > 0) {
          elements.push(<ul key={`list-${index}`} className="list-disc pl-6 mb-4 space-y-1">{currentList}</ul>);
          currentList = [];
        }
        const formattedContent = formatInlineText(trimmedLine);
        elements.push(
          <p key={index} className="mb-3 leading-relaxed text-blue-800">
            {formattedContent}
          </p>
        );
      }
      // Handle separators
      else if (trimmedLine.startsWith('---')) {
        if (currentList.length > 0) {
          elements.push(<ul key={`list-${index}`} className="list-disc pl-6 mb-4 space-y-1">{currentList}</ul>);
          currentList = [];
        }
        elements.push(<hr key={index} className="my-4 border-blue-200" />);
      }
    });
    
    // Add any remaining list items
    if (currentList.length > 0) {
      elements.push(<ul key="final-list" className="list-disc pl-6 mb-4 space-y-1">{currentList}</ul>);
    }
    
    return elements;
  };

  return (
    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6 shadow-sm">
      <div className="flex items-center mb-4">
        <span className="text-2xl mr-3">ðŸ§ </span>
        <h3 className="text-lg font-semibold text-blue-900">AI Reflection</h3>
      </div>
      
      <div className="prose prose-blue max-w-none">
        <div className="space-y-2">
          {formatReflection(reflection)}
        </div>
      </div>
      
      <div className="mt-4 pt-4 border-t border-blue-200">
        <p className="text-xs text-blue-600 italic">
          âœ¨ Generated by your AI Journal Assistant
        </p>
      </div>
    </div>
  );
};

export default ReflectionCard;